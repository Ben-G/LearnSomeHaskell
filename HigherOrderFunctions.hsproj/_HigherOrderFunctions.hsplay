-- Haskell Playground 1.0
compareWithHundred 99

divideByTen 20

divideByTen' 20

applyTwice (+3) 10

let apply = applyTwice (+5)
apply 20

zipWith' (+) [1,2,3] [2,3,4]

zipWith' (*) [1,2] [2,3]

-- Recursively apply zipWith' for nested arrays
zipWith' (zipWith' (*)) [[1,2,3],[3,5,6],[2,3,4]] [[3,2,2],[3,4,5],[5,4,3]] 

let flippedMinus = flip''(-)
10 `flippedMinus` 5

quicksort [4,1,2,8,9,12]

largestDivisible 100000

filterWithWhere

takeWhile (/=' ') "sentence with spaces"

sum (takeWhile (<10000) (filter odd (map (^2) [1..])))

-- Alternative using list comprehension:

sum (takeWhile (<10000) [n^2 | n <- [1..], odd (n^2)])

chain 10

length [1,2,3]

chainsWithLength 100 15

numLongChains
